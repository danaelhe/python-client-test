# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.4, generator: @autorest/python@5.16.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Optional

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class Error(msrest.serialization.Model):
    """Error.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required.
    :vartype code: int
    :ivar message: Required.
    :vartype message: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: int,
        message: str,
        **kwargs
    ):
        """
        :keyword code: Required.
        :paramtype code: int
        :keyword message: Required.
        :paramtype message: str
        """
        super(Error, self).__init__(**kwargs)
        self.code = code
        self.message = message


class Pet(msrest.serialization.Model):
    """Pet.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required.
    :vartype id: long
    :ivar name: Required.
    :vartype name: str
    :ivar tag:
    :vartype tag: str
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'long'},
        'name': {'key': 'name', 'type': 'str'},
        'tag': {'key': 'tag', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: int,
        name: str,
        tag: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword id: Required.
        :paramtype id: long
        :keyword name: Required.
        :paramtype name: str
        :keyword tag:
        :paramtype tag: str
        """
        super(Pet, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.tag = tag
